package com.learning.java.java17.records;

import java.io.Serializable;

// no "extends" -- subtype of java.lang.Record
// implements is fine
// attempts to create "immutable" data carrier
// arguments are called "components" and each component
// creates: private final field of that type (or array for ...)
// and an accessor with the same name **NOT getXxx()**
// takes no arguments throws no exceptions
// immutability is always destroyed by subtypes
record Client(String name, int creditLimit) { // defines "canonical" constructor
    // records can declare static fields and methods
    // and instance methods but NOT instance fields or initializers
//  final int x = 99; // NOPE, not instance fields
//  {} // instance initilializers also prohibited

//  int getStuff() {
//    return creditLimit * 2;
//  }

    // Compact constructor does not declare and argument list at all!!!
    Client {
        if (name == null || name.length() == 0) {
            throw new IllegalArgumentException();
        }
        // NO REFERENCE to the final fields (not yet initialized)
//    System.out.println(this.creditLimit);
        // after this, the regular canonical constructor will run.
        // IT MUST perform the instance field initialization
    }

    @Override // not really an override
    public int creditLimit() {
//    return super.creditLimit() * 2; //NOPE, no super
        return this.creditLimit * 2; // yup, this is fine
    }
// line n1
//  public Client(String name) {
//    this(name, 0);
//  }

//  private Client() {
//    this("Unknown", 0);
//  }
//  public static Client getOne() { return new Client(); }

    // manually define canonical constructor...
/*
  public Client(String name, int creditLimit) { // arguments match *exactly*
//    super(); // NOT permitted
    // MUST initialize autogenerated fields in canonical constructor
    // and nowhere else
    this.name = name;
    this.creditLimit = creditLimit;
  }
*/

}
//A) At line n1
//public Client(String name) {
//    this(name, 0);
//    }
//    B) at line n1
//public Client(String name, int creditLimit) {
//    super();
//    this.name = name;
//    this.creditLimit = creditLimit;
//    }
//    C) as a separate declaration:
//record SpecialClient(String name, int creditLimit, String greeting
//     extends Client(name, creditLimit) {}
//D) at line n1
//private Client() {
//    this("Unknown", 0);
//    }
//    E) at line n1
//    Client {}
